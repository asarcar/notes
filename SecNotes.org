* Threat Models - https://www.youtube.com/watch?v=GqmQg-cszw4
\begin{enumerate}
\item \text{Policy: confidentiality, integrity, and availability}
\item \text{Threat model: assumptions about adversary}
\item \text{Mechanism: software, hardware, system}
\end{enumerate}

Native Client - sandbox runs compiled C/C++ code in browser bringing
portability just as JavaScript does but also security, and performance.

** How security may go wrong?
\begin{enumerate}
\item \text{Policies - email accessible via password or 
answers to challenge Qs} 
\item \text{Threat Models}\\
\text{Human factor - password guess backoff to safeguard users keeping 
simple passwords}\\
\text{Assumptions - SSL/TLS trusts mostly certificates signed
by any CA including say Indian Postal Certificate CA.}\\ 
\text{Technology progress - Kerberos in '80s used 56 bit DES
that can be easily broken via enumeration these days}\\
\text{Darpa secure OS was broken by changing source code that was 
not kept securely}
\item \text{Mechanisms}\\
\text{iCloud - Find my iPhone application password guess backoff not 
implemented}\\
\text{Citi Credit Card - post login change id of the URL and 
access to charges on someone else's account}\\
\text{Android bitcoin - generate random private key with random seed
and sign with different nonce was not followed}
\text{SSL certificates encoding of string is different from C strings}\\
\text{amazon.com0xfoo.com is a subdomain of foo.com but 
browsers's C implementation interprets it as amazon.com0x}
\text{Buffer Overflows}
\end{enumerate}

int read_req(void) {char buf[128]; int i; gets(buf); i = atoi(buf); return i;}
int main(int ac, char** av) {int x = read_req(); printf('x=%d, x);}

* Web Security - https://www.youtube.com/watch?v=_1C62Twf0vs&index=8&list=PLA6Ht2dJt3SLQmKhygx8HfwV_hxuPPCea
** Server security
Initial when client would just render static content from server, focus 
was on server security via Buffer overflow, privileged isolation, etc.
** Client security 
+ Focus on client logic as browser and apps are complicated. 
 ++ JS - client side code 
 ++ DOM - JS code allowed to change visual eg. font styles
 ++ XML Http Requests - asynchronously fetch content from servers i.e. AJAX
 ++ Web sockets - full duplex communication between clients and servers 
 ++ Multi-media (<video> tag plays content without using flash), 
 ++ Geolocation
 ++ NaCL - allows browser to run native code    
** Browser page - amalgamation of parties
Typical application was developed by one monolithic company that 
controlled the experience and attack vector - word doc. Browser
page is composition of several parties.
+ http://www.foo.com
 ++ ad .gif from ads.com
 ++ page analytics pixel from google.com
 ++ jQuery.js from cdn.bar.com for image rendering
 ++ HTML buttons, text input
 ++ inine js from foo.com
 ++ frame (i.e. separate js universe) from https://facebook.com/likeThis.html 
    inline.js from FB, f.jpb from https://facebook.com
** Same origin policy
Browser security model implements policy where 
goal is two website should not be able to tamper with each other i.e.
each resource is assigned origin. JS can access resources from origin.
Origin =  scheme (i.e. http or https) + hostname + port (i.e. 80)
Origin of http://foo.com:8181/abc is http + foo.com + 8181. Origin 
roughly translates in Unix parlance to user ID with frame as process ID
i.e. aggregation of bunch of resources.

*** Ideas of browser's implementation of origin policy
+ Four core resources that same origin policy protects:
 ++ Access association of origin with following client side resources
  +++ Cookies - each Origin has client side resources e.g. pwd, shopping cart
  +++ DOM storage - allows origin to associate K,V strings
  +++ JS namespace - what fns and interfaces available to origin
  +++ DOM tree - JS reflection of HTML in page
  +++ Visual display area
 ++ Frame gets origin of its URL
 ++ (Java) script executes with authority it's frame's origin
 ++ Passive content (images, CSS file) gets zero authority

PostMessage allows two different frames to exchange synchronous immutable
messages with each other if both opt in to the message.

*** Constructs wrt how frames access resources wrt same origin policies
Frames/window objects get the origin of the frame's URL OR a suffix of the 
original domain e.g. origin = y.z.com from x.y.z.com allowed but not a.com
as a.com is not suffix or origin of .com is not allowed as it is not domain.

Two frame can access each other if either borh set document.domain to the 
same value OR neither has changed document.domain and their values match -
prevents a subdomain to attack parent domain.

*** Dom nodes 
Gets origin of surrounding frame

*** Cookies
Cookies have domain and path and JS can set object document.cookie. Server
can use 'set cookie header.' Secure flag in cookie to indicate it is HTTPS
cookie that cannot be accessed by HTTP. Browser sends all matching cookie 
to a server. 
Cookies allow client side of application to store per user data and per 
user authenticated/authorized status wrt a site. By hacking cookie one 
can make boogey purchases or have the user type email to non gmail 
account.

*** XML Http Request
JS can only generate asynch request if it is going to its origin unless
server enables 'Cross origin requests' (CORS) via HTTP response header
'Access-Control-Allow-Origin.foo.com' to enable mashups.

*** Images and CSS
Frame can load images and CSS files from any origin but cannot inspect 
bits or text inside files.

*** JS
Can call JS of another origin but cannot inspect source code.

*** Plugin
Frame can run (java) plugin from any origin. New HTML5 pages can do
stuff that was only possible by using plugins.

** Attack examples
*** Cross site request forgery (CSRF)
Malicious site generates a URL via a child frame and mimic a transfer of 
money between user to third party http://bank.com/xfer?amount=500&to=attacker.
Even though attacker page won't be able to access the bank origin resources. 
Bank would obey the command as all the cookies of user is valid. 
Prevent this attack by the bank (valid) server generating a random number
0xa73f each time the user accesses bank which should be provided in the next 
request e.g. http://bank.com/xfer?amount=500&to=attacker&csrf=0xa73f.
*** DNS rebinding attack  
Network addresses - Frame can send http(s) request to a host with same 
origin policy, where origin is tied to what names mean which is tied to 
DNS. Goal of attacket is run attacker controlled JS with authority of 
victim website victim.com.
+ Approach
 ++ attacker registers attacker.com
 ++ user visit attacker.com
 ++ browser generates DNS request to attacker.com
 ++ attacker DNS responds with small TTL
 ++ attacker binds attacker.com to victim.com intranet IP address. The 
    intranet resolution allows attacker to hop through different IP 
    addresses and see which one responds otherwise FW blocks such requests.
 ++ website fetch new object via AJAX that goes to victim.com i.e. JS with 
    origin privilege meant for attacker has privilege to access data of 
    different origin victim.com - attacker.com web page can send data to 
    server. 
Solution is by ensuring that client side DNS resolver checks that external 
host names never resolve to internal ip addresses OR browser DNS pinning so that
DNS resolution records is kept valid regardless of TTL - tricky as some sites
used dynamic DNS for load balancing.
*** 'Click at me' attack
Same origin policy does not protect pixels. Frame can draw over the real estate
it owns - parent frame can draw over child frame.
+ Pixels attack
 ++ Child frame - FB "like button" frame 
 ++ Parent frame - message 'click to win iPad' that user clicks but in
    reality likes an invisible "attacker.com!" 
Solution is use 'frame busting code' - JS expressions to test whether you 
are the top frame e.g. if (self != top) OR X-Frame-Options set in HTTP 
response to prevent browser to use your page as child frame.
*** Miscellaneous attacks
+ Attacks
 ++ Unicode attack Attacker uses unicode "cerelic C" instead of attacker 
    "latin C" e.g.Cats.com or "fcebook.com" to rely on user mistyping and 
    then booking that domain name to attack.
 ++ Java plugins assume that different domain name that resolve to same
    IP belong to same origin i.e. x.y.com and z.y.com are same but one may
    be valid for user while the other not.
 ++ Screen sharing attack - HTML5 allows all the bits in screen to be 
    shared another browser or server for collaboration. Did not factor in
    'same origin policy' i.e. child frame can take the snapshot of entire
    screen even of other frames!
* Network Security - https://www.youtube.com/watch?v=BZTWXl9QNK8&index=11
Internet was designed with requirement to connect bunch of trusting sites. 
+ Threat Model
 ++ intercept packets, modify
 ++ inject packets as someone else e.g. src-ip filling is left to sender
 ++ attacker has computer with full control
 ++ participate in distributed protocol
* TLS with PFS - 
** Vanilla TLS issue
+ TLS Steps
 ++ Client sends random integer c in Hello. 
 ++ Server responds with random integer s in Hello signed 
    with private certificate for authentication. 
 ++ Client responds with pre-master secret encrypted with 
    Server public key. 
 ++ Server acks the secret to complete handshake.
 ++ Master secret is a function of pre-master secret, c, and s.

Issue is pre-recorded handshake message can be tampered
if the private key of server is ever tampered. Root cause is
the private key is used for authentication of server and 
encryption of a shared secret key. While authentication 
matters while communicating, encryption is expected to last 
for years.

+ TLS with PFS using Deffie-Hellman with elliptic curves
  ++ Client and Server via Hello handshake agree on G - a base 
     point G based on the algebraic structure of elliptic curves
     (e.g. y2 = x3 - 3x + 3) over finite fields.
  ++ Server picks a random integer s, computes sG, and sends unencrypted
     authenticated with private key in Server key exchange message.
  ++ Client picks a random integer c, computes bG, and sends bG in a 
     Client Key Exchange message. 
  ++ Both client and server compute premaster secret by computing abG
     from which master secret is derived. Note an eavesdropper who sees
     aG and bG won't be able to compute efficiently abG.
* HTTPS - https://www.youtube.com/watch?v=q1OF_0ICt9A
** Symmetric enc/dec
$$E_k(p) = c; D_k(c) = p$$
** Assymetric enc/dec
$$E_{pk}(p) = c; D_{sk}(c) = p$$
** Sign/verify 
$$Sign_{sk}(m) = s; Verify_{pk}(m, s) = OK?$$
** Cipher Suite
Key Exchange Algorithm - RSA, DHE, ECDHE, PST, ...
Authentication - RSA, DSS, ECDSA, ...
Encryption - AES, Camellia, ...
Message Authentication Code - MD5. SHA1, SHA256, ...

