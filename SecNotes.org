* Threat Models - https://www.youtube.com/watch?v=GqmQg-cszw4
\begin{enumerate}
\item \text{Policy: confidentiality, integrity, and availability}
\item \text{Threat model: assumptions about adversary}
\item \text{Mechanism: software, hardware, system}
\end{enumerate}

Native Client - sandbox runs compiled C/C++ code in browser bringing
portability just as JavaScript does but also security, and performance.

** How security may go wrong?
\begin{enumerate}
\item \text{Policies - email accessible via password or 
answers to challenge Qs} 
\item \text{Threat Models}\\
\text{Human factor - password guess backoff to safeguard users keeping 
simple passwords}\\
\text{Assumptions - SSL/TLS trusts mostly certificates signed
by any CA including say Indian Postal Certificate CA.}\\ 
\text{Technology progress - Kerberos in '80s used 56 bit DES
that can be easily broken via enumeration these days}\\
\text{Darpa secure OS was broken by changing source code that was 
not kept securely}
\item \text{Mechanisms}\\
\text{iCloud - Find my iPhone application password guess backoff not 
implemented}\\
\text{Citi Credit Card - post login change id of the URL and 
access to charges on someone else's account}\\
\text{Android bitcoin - generate random private key with random seed
and sign with different nonce was not followed}
\text{SSL certificates encoding of string is different from C strings}\\
\text{amazon.com0xfoo.com is a subdomain of foo.com but 
browsers's C implementation interprets it as amazon.com0x}
\text{Buffer Overflows}
\end{enumerate}

int read_req(void) {char buf[128]; int i; gets(buf); i = atoi(buf); return i;}
int main(int ac, char** av) {int x = read_req(); printf('x=%d, x);}

* Network Security - https://www.youtube.com/watch?v=BZTWXl9QNK8&index=11


* HTTPS - https://www.youtube.com/watch?v=q1OF_0ICt9A
** Symmetric enc/dec
$$E_k(p) = c; D_k(c) = p$$
** Assymetric enc/dec
$$E_{pk}(p) = c; D_{sk}(c) = p$$
** Sign/verify 
$$Sign_{sk}(m) = s; Verify_{pk}(m, s) = OK?$$
