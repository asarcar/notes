* http://www.oreilly.com/webops-perf/free/files/kubernetes.pdf
** Containers
Smaller units of deployment than VM using cGroups and kernel namespaces.
** PODs
Emulates a logical host running an application instance implemented
via a collection of cooperative containers (compute), volumes (storage), 
and network. The containers communicate via localhost and are bundled 
as well as scheduled together as they share a common purpose and 
resource, such as a File System or IP address.
** Replicas
Multiple POD copies sitting behind a load balancer providing
scale and fault tolerance to an application.
** Volumes
Virtual File System that is treated as a durable store used to share 
and preserve state between containers in a POD.
*** EmptyDir
Ephemeral storage used for temporary data between containers of the
POD. Storage lost when POD dies.
*** NFS
NFS volumes mounted at POD that exists beyond life of POD. NFS volume
may be managed service e.g. Persistent Disk (PD) from Google.
** Borg
Google created a lot of orchestration and scheduling software to 
handle isolation (failures of one component does not impact another), 
load balancing, and placement i.e. detect and replace failures 
instantaneously. 
Google schedules and launches around 7K containers a second.
** Service vs App
Service is designed to do one (or small number of discrete things), 
has no UI (or command line), and is invoked solely via API.
App has UI, performs many tasks, and may also expose APIs.
Apps may often composed via many services.
** Function
Manage fleet of mchs running services running in a container.
Nodes: Worker machines running containers aka minions.
Masters: Run coordinating sw that schededule containers on nodes.
Clusters: Physically colocated collection of masters and nodes.
** Master Components
*** API Server
All components on master and nodes accomplish tasks via API calls
handled by API server.
*** Etcd
Lightweight distributed K/V store that keeps and replicates the 
current cluster configuration and run state.
*** Scheduler and Controller Manager
Processes that schedule PODs onto nodes.
** Node Components
*** Kubelet
Daemon running on each node that create, destroy, and monitor PODs.
*** Proxy
Network proxy separates IP address of target container from service name.
*** cAdvisor
Daemon collects, aggregates, processes, and exports container metrics,
such as resource isolation information, historical usage, and key 
network stats.
** Labels, Annotations, and Selectors
*** Labels
K/V pair assigned to a Kubernetes object (e.g. POD).
*** Label Selectors
String used to query labels to match for organizing/grouping things,
such as for routing and orchestration.
Matching is equality (= or !=), or set based (IN or NOT IN). AND 
operation is realized via ",".
*** Annotations
Bits of useful information used to store about a POD that is handy 
but doesn't need to be queried i.e. filtered or searched.
** Replication Controllers
Process that manages (creates/destroys) replicas to ensure correct 
number of replicas are running at all times.
** Services
Service is a long-lived well-known endpoint that points to 
a set of PODs in a cluster with the following attributes: 
1. Portal-IP i.e. external IP address, 2. Port, and 3. Label selector.
Service is exposed via a small proxy process which routes to 
an appropriate POD based on label selector.
** Life of Client Request
Client => DNS Lookup => LB => Cluster => Portal-IP => 
Proxy =label-selector=> POD
** Service Discovery
*** Environment Variable 
Kubernetes creates a set of env vars on a node that describes the
service whene a POD exposes a service on that node.
*** Cluster DNS
Special POD per cluster that exposes DNS service with following 
three special containers:
1. etcD: Store for actual lookup information.
2. SkyDns: Special DNS server that reads from etcd.
3. Kube2sky: Watches master for changes in list of services and 
publishes to etcD which is then picked up by SkyDns.
** Exposing Services
1. Direct Access: Allow FW to pass outside to service portal IP. 
Proxy on node then redirects to appropriate POD and container.
2. DIY LB: HAProxy populated with portal-IPs of service.
3. Managed Hosting: CSP automatically adds Portal_IPs to LBs.
** Health Checks
Allows basic: Process up in Container, TCP/Port Probe, HTTP Get, and Custom.
* https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44843.pdf
** History
*** Containers
1. chroot originally used to separate and isolate file system
namespaces was extended to process IDs, networking, etc. 
2. cGroups a linux kernel feature was developed to limit,
account for, and isolate resource usage, such as CPU, memory,
disk I/O, network, etc.
These allow systems, such as Kubernetes, to manage different 
task flavors running on the same OS/kernel by hermitically sealing 
them into units (aka containers) that protect apps from noisey,
nosey, and messy neighbors as well as encapsulating most
app dependencies into container packages!
Note:
1. The isolation cannot prevent interference of non kernel resources, 
such as level-3 processor caches and memory bandwidth. 
2. Additional security layers of VMs are still needed to protect 
against malicious cloud actors.
3. Apps are still exposed to churn in OS interface, such as
kernel system-call interface e.g. socket options, /proc and args, 
ioctl calls, etc.
*** Borg
   Resource Management and Scheduling of latency sensitive and batch jobs.
*** Omega
Cleaned up the hodge podge of tools built by separating out cluster state 
in a paxos oriented transaction store and the cluster control
plane that handles different aspects of scheduling using multiple peers 
that interact with the cluster state store.
*** Kubernetes
Takes Omega a step further for cloud development community to 
ensure developers are not encumbered with aspects of distributed 
task development, such as naming, discovery, load-balancing, 
monitoring, auto-scaling, etc. by ensuring all the interactions are
realized via APIs that are validated, versioned, etc.

Container encompasses the runtime isolation as well as the image 
registry and managment system that provides the following services:
(a) package files that make up the app running inside containers.  
(b) package manager, build, and deployment tools of the images.

** App Oriented Infrastructure
*** Encapsulation
Containers encapsulate app environment abstracting machine and 
OS details from developer and deployment infrastructure.
*** Management Unit
Containers and container images are scoped to a single application.
As such, by managing containers one manages apps not machines.

** Containers as "unit of management"
1. Relieves app developers and ops team from mc and os details.
2. Infra teams roll out new mc and upgrade os unencumbered by 
running apps and developers.
3. Telemetry collection (CPU/Memory) is app rather than mc centric
improving app monitoring and introspection even under scale up, 
mc failures, or maintenance causing app instance migration.
3.1. App health exported via HTTP endpoint.
3.2. KV annotations to communicate to/from containers.
3.3. cGroups allow app specific metric exported via HTTP APIs. 
4. Managment layer is apps not mc. LB keyed by app not mc. 
Logs are keyed, collected, and aggregated by app not teased
apart from mc logs. App failures not teased apart from mc 
failure signals.
** Nested Containers 
Outermost Pods (Alloc) provides pool of resources. 
Inner one provide deployment isolation.
** Container Management Services
+ Development environment to manage reliable distributed system apps
 ++ Naming and Service Discovery
 ++ Master Election (Raft/Chubby)
 ++ App aware LB
 ++ Autoscaling Instances - Scale out and Scale Up 
 ++ Deployment of new binaries and config data
 ++ Workflow - run multijob analysis pipelines
 ++ Monitoring - gather container info, aggregate, dashboard, alert, ...

** Kubernetes Service Object
*** Object Metadata
Object Name, UID, Version # (optimistic concurrency control), and
labels i.e. (K,V) pairs.
*** Spec
Describe the desired state of the object.
*** Status
Read only information about current state of object.

** Choreograph vs Orchestrate
Control through a combination of microservices and 
small control loops achieves a desired emergent behavior. 
Effect is achieved via choreographed collaboration of separate
autonomous entities. 
Note centralized orchestration systems are easier to construct 
but becomes brittle and rigid over time in presence of 
unanticipated errors or state changes.

** Kubernetes Attributes
1. IP address per POD aligns network and app identity.
2. Tags i.e. Labels are dynamically manipulated (K,V) pairs 
ascribed to objects e.g. POD object labels: role=frontend 
and stage=production. 
3. Grouping mechanism is Label selectors (e.g. stage=production 
&& role==frontend) define set of objects.
